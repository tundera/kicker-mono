enum OrderByArg {
    ASC
    DESC
}

type Coach {
    id: Int!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    handle: String!
    name: String!
    type: String
    isAssistant: String
    team: Team
    teamId: Int
}

type Player {
    id: Int!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    handle: String!
    name: String!
    slug: String!
    height: String!
    weight: String!
    number: String
    position: String
    team: Team
    teamId: Int
}

type ColorScheme {
    id: Int!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    primary: String!
    secondary: String!
    team: Team
    teamId: Int
}

type Team {
    id: Int!
    createdAt: AWSDateTime!
    updatedAt: AWSDateTime!
    handle: String!
    name: String!
    slug: String!
    city: String!
    abbreviation: String!
    logo: String!
    logoSlug: String!
    wins: Int
    losses: Int
    winPercentage: Float
    conference: String!
    division: String!
    established: String!
    coaches: [Coach!]
    colorScheme: ColorScheme
    players: [Player!]
}

type BatchPayload {
    count: Int
}

input CoachCreateInput {
    handle: String!
    name: String!
    type: String
    isAssistant: String
    team: CoachTeamCreateRelations
}

input CoachUpdateInput {
    handle: String
    name: String
    type: String
    isAssistant: String
    team: CoachTeamUpdateRelations
}

input CoachWhereInput {
    OR: [CoachWhereInput]
    NOT: [CoachWhereInput]
    AND: [CoachWhereInput]
    id: Int
    id_equals: Int
    id_not: Int
    id_lt: Int
    id_lte: Int
    id_gt: Int
    id_gte: Int
    id_contains: Int
    id_startsWith: Int
    id_endsWith: Int
    createdAt: AWSDateTime
    createdAt_equals: AWSDateTime
    createdAt_not: AWSDateTime
    createdAt_lt: AWSDateTime
    createdAt_lte: AWSDateTime
    createdAt_gt: AWSDateTime
    createdAt_gte: AWSDateTime
    createdAt_contains: AWSDateTime
    createdAt_startsWith: AWSDateTime
    createdAt_endsWith: AWSDateTime
    updatedAt: AWSDateTime
    updatedAt_equals: AWSDateTime
    updatedAt_not: AWSDateTime
    updatedAt_lt: AWSDateTime
    updatedAt_lte: AWSDateTime
    updatedAt_gt: AWSDateTime
    updatedAt_gte: AWSDateTime
    updatedAt_contains: AWSDateTime
    updatedAt_startsWith: AWSDateTime
    updatedAt_endsWith: AWSDateTime
    handle: String
    handle_equals: String
    handle_not: String
    handle_lt: String
    handle_lte: String
    handle_gt: String
    handle_gte: String
    handle_contains: String
    handle_startsWith: String
    handle_endsWith: String
    name: String
    name_equals: String
    name_not: String
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_startsWith: String
    name_endsWith: String
    type: String
    type_equals: String
    type_not: String
    type_lt: String
    type_lte: String
    type_gt: String
    type_gte: String
    type_contains: String
    type_startsWith: String
    type_endsWith: String
    isAssistant: String
    isAssistant_equals: String
    isAssistant_not: String
    isAssistant_lt: String
    isAssistant_lte: String
    isAssistant_gt: String
    isAssistant_gte: String
    isAssistant_contains: String
    isAssistant_startsWith: String
    isAssistant_endsWith: String
    team: TeamWhereInput
    teamId: Int
    teamId_equals: Int
    teamId_not: Int
    teamId_lt: Int
    teamId_lte: Int
    teamId_gt: Int
    teamId_gte: Int
    teamId_contains: Int
    teamId_startsWith: Int
    teamId_endsWith: Int
}

input CoachWhereUniqueInput {
    id: Int
    handle: String
    name: String
    teamId: Int
}

input CoachOrderByInput {
    id: OrderByArg
    createdAt: OrderByArg
    updatedAt: OrderByArg
    handle: OrderByArg
    name: OrderByArg
    type: OrderByArg
    isAssistant: OrderByArg
    teamId: OrderByArg
}

input CoachUpdateUniqueInput {
    data: CoachUpdateInput!
    where: CoachWhereUniqueInput!
}

input CoachUpdateManyInput {
    data: CoachUpdateInput!
    where: CoachWhereInput!
}

input CoachUpsertInput {
    create: CoachCreateInput!
    update: CoachUpdateInput!
}

input CoachUpsertUniqueInput {
    where: CoachWhereUniqueInput!
    create: CoachCreateInput!
    update: CoachUpdateInput!
}

input CoachDeleteUniqueInput {
    where: CoachWhereUniqueInput!
}

input CoachDeleteManyInput {
    where: CoachWhereInput!
}

input CoachConnectOrCreateInput {
    where: CoachWhereUniqueInput!
    create: CoachCreateInput!
}

input CoachTeamCreateRelations {
    create: TeamCreateInput
    connect: TeamWhereUniqueInput
    connectOrCreate: TeamConnectOrCreateInput
}

input CoachTeamUpdateRelations {
    create: TeamCreateInput
    connect: TeamWhereUniqueInput
    connectOrCreate: TeamConnectOrCreateInput
    update: TeamUpdateInput
    upsert: TeamUpsertInput
    delete: Boolean
    disconnect: Boolean
}

input PlayerCreateInput {
    handle: String!
    name: String!
    slug: String!
    height: String!
    weight: String!
    number: String
    position: String
    team: PlayerTeamCreateRelations
}

input PlayerUpdateInput {
    handle: String
    name: String
    slug: String
    height: String
    weight: String
    number: String
    position: String
    team: PlayerTeamUpdateRelations
}

input PlayerWhereInput {
    OR: [PlayerWhereInput]
    NOT: [PlayerWhereInput]
    AND: [PlayerWhereInput]
    id: Int
    id_equals: Int
    id_not: Int
    id_lt: Int
    id_lte: Int
    id_gt: Int
    id_gte: Int
    id_contains: Int
    id_startsWith: Int
    id_endsWith: Int
    createdAt: AWSDateTime
    createdAt_equals: AWSDateTime
    createdAt_not: AWSDateTime
    createdAt_lt: AWSDateTime
    createdAt_lte: AWSDateTime
    createdAt_gt: AWSDateTime
    createdAt_gte: AWSDateTime
    createdAt_contains: AWSDateTime
    createdAt_startsWith: AWSDateTime
    createdAt_endsWith: AWSDateTime
    updatedAt: AWSDateTime
    updatedAt_equals: AWSDateTime
    updatedAt_not: AWSDateTime
    updatedAt_lt: AWSDateTime
    updatedAt_lte: AWSDateTime
    updatedAt_gt: AWSDateTime
    updatedAt_gte: AWSDateTime
    updatedAt_contains: AWSDateTime
    updatedAt_startsWith: AWSDateTime
    updatedAt_endsWith: AWSDateTime
    handle: String
    handle_equals: String
    handle_not: String
    handle_lt: String
    handle_lte: String
    handle_gt: String
    handle_gte: String
    handle_contains: String
    handle_startsWith: String
    handle_endsWith: String
    name: String
    name_equals: String
    name_not: String
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_startsWith: String
    name_endsWith: String
    slug: String
    slug_equals: String
    slug_not: String
    slug_lt: String
    slug_lte: String
    slug_gt: String
    slug_gte: String
    slug_contains: String
    slug_startsWith: String
    slug_endsWith: String
    height: String
    height_equals: String
    height_not: String
    height_lt: String
    height_lte: String
    height_gt: String
    height_gte: String
    height_contains: String
    height_startsWith: String
    height_endsWith: String
    weight: String
    weight_equals: String
    weight_not: String
    weight_lt: String
    weight_lte: String
    weight_gt: String
    weight_gte: String
    weight_contains: String
    weight_startsWith: String
    weight_endsWith: String
    number: String
    number_equals: String
    number_not: String
    number_lt: String
    number_lte: String
    number_gt: String
    number_gte: String
    number_contains: String
    number_startsWith: String
    number_endsWith: String
    position: String
    position_equals: String
    position_not: String
    position_lt: String
    position_lte: String
    position_gt: String
    position_gte: String
    position_contains: String
    position_startsWith: String
    position_endsWith: String
    team: TeamWhereInput
    teamId: Int
    teamId_equals: Int
    teamId_not: Int
    teamId_lt: Int
    teamId_lte: Int
    teamId_gt: Int
    teamId_gte: Int
    teamId_contains: Int
    teamId_startsWith: Int
    teamId_endsWith: Int
}

input PlayerWhereUniqueInput {
    id: Int
    handle: String
    name: String
    slug: String
    teamId: Int
}

input PlayerOrderByInput {
    id: OrderByArg
    createdAt: OrderByArg
    updatedAt: OrderByArg
    handle: OrderByArg
    name: OrderByArg
    slug: OrderByArg
    height: OrderByArg
    weight: OrderByArg
    number: OrderByArg
    position: OrderByArg
    teamId: OrderByArg
}

input PlayerUpdateUniqueInput {
    data: PlayerUpdateInput!
    where: PlayerWhereUniqueInput!
}

input PlayerUpdateManyInput {
    data: PlayerUpdateInput!
    where: PlayerWhereInput!
}

input PlayerUpsertInput {
    create: PlayerCreateInput!
    update: PlayerUpdateInput!
}

input PlayerUpsertUniqueInput {
    where: PlayerWhereUniqueInput!
    create: PlayerCreateInput!
    update: PlayerUpdateInput!
}

input PlayerDeleteUniqueInput {
    where: PlayerWhereUniqueInput!
}

input PlayerDeleteManyInput {
    where: PlayerWhereInput!
}

input PlayerConnectOrCreateInput {
    where: PlayerWhereUniqueInput!
    create: PlayerCreateInput!
}

input PlayerTeamCreateRelations {
    create: TeamCreateInput
    connect: TeamWhereUniqueInput
    connectOrCreate: TeamConnectOrCreateInput
}

input PlayerTeamUpdateRelations {
    create: TeamCreateInput
    connect: TeamWhereUniqueInput
    connectOrCreate: TeamConnectOrCreateInput
    update: TeamUpdateInput
    upsert: TeamUpsertInput
    delete: Boolean
    disconnect: Boolean
}

input ColorSchemeCreateInput {
    primary: String!
    secondary: String!
    team: ColorSchemeTeamCreateRelations
}

input ColorSchemeUpdateInput {
    primary: String
    secondary: String
    team: ColorSchemeTeamUpdateRelations
}

input ColorSchemeWhereInput {
    OR: [ColorSchemeWhereInput]
    NOT: [ColorSchemeWhereInput]
    AND: [ColorSchemeWhereInput]
    id: Int
    id_equals: Int
    id_not: Int
    id_lt: Int
    id_lte: Int
    id_gt: Int
    id_gte: Int
    id_contains: Int
    id_startsWith: Int
    id_endsWith: Int
    createdAt: AWSDateTime
    createdAt_equals: AWSDateTime
    createdAt_not: AWSDateTime
    createdAt_lt: AWSDateTime
    createdAt_lte: AWSDateTime
    createdAt_gt: AWSDateTime
    createdAt_gte: AWSDateTime
    createdAt_contains: AWSDateTime
    createdAt_startsWith: AWSDateTime
    createdAt_endsWith: AWSDateTime
    updatedAt: AWSDateTime
    updatedAt_equals: AWSDateTime
    updatedAt_not: AWSDateTime
    updatedAt_lt: AWSDateTime
    updatedAt_lte: AWSDateTime
    updatedAt_gt: AWSDateTime
    updatedAt_gte: AWSDateTime
    updatedAt_contains: AWSDateTime
    updatedAt_startsWith: AWSDateTime
    updatedAt_endsWith: AWSDateTime
    primary: String
    primary_equals: String
    primary_not: String
    primary_lt: String
    primary_lte: String
    primary_gt: String
    primary_gte: String
    primary_contains: String
    primary_startsWith: String
    primary_endsWith: String
    secondary: String
    secondary_equals: String
    secondary_not: String
    secondary_lt: String
    secondary_lte: String
    secondary_gt: String
    secondary_gte: String
    secondary_contains: String
    secondary_startsWith: String
    secondary_endsWith: String
    team: TeamWhereInput
    teamId: Int
    teamId_equals: Int
    teamId_not: Int
    teamId_lt: Int
    teamId_lte: Int
    teamId_gt: Int
    teamId_gte: Int
    teamId_contains: Int
    teamId_startsWith: Int
    teamId_endsWith: Int
}

input ColorSchemeWhereUniqueInput {
    id: Int
    teamId: Int
}

input ColorSchemeOrderByInput {
    id: OrderByArg
    createdAt: OrderByArg
    updatedAt: OrderByArg
    primary: OrderByArg
    secondary: OrderByArg
    teamId: OrderByArg
}

input ColorSchemeUpdateUniqueInput {
    data: ColorSchemeUpdateInput!
    where: ColorSchemeWhereUniqueInput!
}

input ColorSchemeUpdateManyInput {
    data: ColorSchemeUpdateInput!
    where: ColorSchemeWhereInput!
}

input ColorSchemeUpsertInput {
    create: ColorSchemeCreateInput!
    update: ColorSchemeUpdateInput!
}

input ColorSchemeUpsertUniqueInput {
    where: ColorSchemeWhereUniqueInput!
    create: ColorSchemeCreateInput!
    update: ColorSchemeUpdateInput!
}

input ColorSchemeDeleteUniqueInput {
    where: ColorSchemeWhereUniqueInput!
}

input ColorSchemeDeleteManyInput {
    where: ColorSchemeWhereInput!
}

input ColorSchemeConnectOrCreateInput {
    where: ColorSchemeWhereUniqueInput!
    create: ColorSchemeCreateInput!
}

input ColorSchemeTeamCreateRelations {
    create: TeamCreateInput
    connect: TeamWhereUniqueInput
    connectOrCreate: TeamConnectOrCreateInput
}

input ColorSchemeTeamUpdateRelations {
    create: TeamCreateInput
    connect: TeamWhereUniqueInput
    connectOrCreate: TeamConnectOrCreateInput
    update: TeamUpdateInput
    upsert: TeamUpsertInput
    delete: Boolean
    disconnect: Boolean
}

input TeamCreateInput {
    handle: String!
    name: String!
    slug: String!
    city: String!
    abbreviation: String!
    logo: String!
    logoSlug: String!
    wins: Int
    losses: Int
    winPercentage: Float
    conference: String!
    division: String!
    established: String!
    coaches: TeamCoachesCreateRelations
    colorScheme: TeamColorSchemeCreateRelations
    players: TeamPlayersCreateRelations
}

input TeamUpdateInput {
    handle: String
    name: String
    slug: String
    city: String
    abbreviation: String
    logo: String
    logoSlug: String
    wins: Int
    losses: Int
    winPercentage: Float
    conference: String
    division: String
    established: String
    coaches: TeamCoachesUpdateRelations
    colorScheme: TeamColorSchemeUpdateRelations
    players: TeamPlayersUpdateRelations
}

input TeamWhereInput {
    OR: [TeamWhereInput]
    NOT: [TeamWhereInput]
    AND: [TeamWhereInput]
    id: Int
    id_equals: Int
    id_not: Int
    id_lt: Int
    id_lte: Int
    id_gt: Int
    id_gte: Int
    id_contains: Int
    id_startsWith: Int
    id_endsWith: Int
    createdAt: AWSDateTime
    createdAt_equals: AWSDateTime
    createdAt_not: AWSDateTime
    createdAt_lt: AWSDateTime
    createdAt_lte: AWSDateTime
    createdAt_gt: AWSDateTime
    createdAt_gte: AWSDateTime
    createdAt_contains: AWSDateTime
    createdAt_startsWith: AWSDateTime
    createdAt_endsWith: AWSDateTime
    updatedAt: AWSDateTime
    updatedAt_equals: AWSDateTime
    updatedAt_not: AWSDateTime
    updatedAt_lt: AWSDateTime
    updatedAt_lte: AWSDateTime
    updatedAt_gt: AWSDateTime
    updatedAt_gte: AWSDateTime
    updatedAt_contains: AWSDateTime
    updatedAt_startsWith: AWSDateTime
    updatedAt_endsWith: AWSDateTime
    handle: String
    handle_equals: String
    handle_not: String
    handle_lt: String
    handle_lte: String
    handle_gt: String
    handle_gte: String
    handle_contains: String
    handle_startsWith: String
    handle_endsWith: String
    name: String
    name_equals: String
    name_not: String
    name_lt: String
    name_lte: String
    name_gt: String
    name_gte: String
    name_contains: String
    name_startsWith: String
    name_endsWith: String
    slug: String
    slug_equals: String
    slug_not: String
    slug_lt: String
    slug_lte: String
    slug_gt: String
    slug_gte: String
    slug_contains: String
    slug_startsWith: String
    slug_endsWith: String
    city: String
    city_equals: String
    city_not: String
    city_lt: String
    city_lte: String
    city_gt: String
    city_gte: String
    city_contains: String
    city_startsWith: String
    city_endsWith: String
    abbreviation: String
    abbreviation_equals: String
    abbreviation_not: String
    abbreviation_lt: String
    abbreviation_lte: String
    abbreviation_gt: String
    abbreviation_gte: String
    abbreviation_contains: String
    abbreviation_startsWith: String
    abbreviation_endsWith: String
    logo: String
    logo_equals: String
    logo_not: String
    logo_lt: String
    logo_lte: String
    logo_gt: String
    logo_gte: String
    logo_contains: String
    logo_startsWith: String
    logo_endsWith: String
    logoSlug: String
    logoSlug_equals: String
    logoSlug_not: String
    logoSlug_lt: String
    logoSlug_lte: String
    logoSlug_gt: String
    logoSlug_gte: String
    logoSlug_contains: String
    logoSlug_startsWith: String
    logoSlug_endsWith: String
    wins: Int
    wins_equals: Int
    wins_not: Int
    wins_lt: Int
    wins_lte: Int
    wins_gt: Int
    wins_gte: Int
    wins_contains: Int
    wins_startsWith: Int
    wins_endsWith: Int
    losses: Int
    losses_equals: Int
    losses_not: Int
    losses_lt: Int
    losses_lte: Int
    losses_gt: Int
    losses_gte: Int
    losses_contains: Int
    losses_startsWith: Int
    losses_endsWith: Int
    winPercentage: Float
    winPercentage_equals: Float
    winPercentage_not: Float
    winPercentage_lt: Float
    winPercentage_lte: Float
    winPercentage_gt: Float
    winPercentage_gte: Float
    winPercentage_contains: Float
    winPercentage_startsWith: Float
    winPercentage_endsWith: Float
    conference: String
    conference_equals: String
    conference_not: String
    conference_lt: String
    conference_lte: String
    conference_gt: String
    conference_gte: String
    conference_contains: String
    conference_startsWith: String
    conference_endsWith: String
    division: String
    division_equals: String
    division_not: String
    division_lt: String
    division_lte: String
    division_gt: String
    division_gte: String
    division_contains: String
    division_startsWith: String
    division_endsWith: String
    established: String
    established_equals: String
    established_not: String
    established_lt: String
    established_lte: String
    established_gt: String
    established_gte: String
    established_contains: String
    established_startsWith: String
    established_endsWith: String
    coaches: CoachWhereInput
    colorScheme: ColorSchemeWhereInput
    players: PlayerWhereInput
}

input TeamWhereUniqueInput {
    id: Int
    handle: String
    name: String
    slug: String
    abbreviation: String
    logo: String
    logoSlug: String
}

input TeamOrderByInput {
    id: OrderByArg
    createdAt: OrderByArg
    updatedAt: OrderByArg
    handle: OrderByArg
    name: OrderByArg
    slug: OrderByArg
    city: OrderByArg
    abbreviation: OrderByArg
    logo: OrderByArg
    logoSlug: OrderByArg
    wins: OrderByArg
    losses: OrderByArg
    winPercentage: OrderByArg
    conference: OrderByArg
    division: OrderByArg
    established: OrderByArg
}

input TeamUpdateUniqueInput {
    data: TeamUpdateInput!
    where: TeamWhereUniqueInput!
}

input TeamUpdateManyInput {
    data: TeamUpdateInput!
    where: TeamWhereInput!
}

input TeamUpsertInput {
    create: TeamCreateInput!
    update: TeamUpdateInput!
}

input TeamUpsertUniqueInput {
    where: TeamWhereUniqueInput!
    create: TeamCreateInput!
    update: TeamUpdateInput!
}

input TeamDeleteUniqueInput {
    where: TeamWhereUniqueInput!
}

input TeamDeleteManyInput {
    where: TeamWhereInput!
}

input TeamConnectOrCreateInput {
    where: TeamWhereUniqueInput!
    create: TeamCreateInput!
}

input TeamCoachesCreateRelations {
    create: [CoachCreateInput]
    connect: [CoachWhereUniqueInput]
    connectOrCreate: [CoachConnectOrCreateInput]
}

input TeamCoachesUpdateRelations {
    create: [CoachCreateInput]
    connect: [CoachWhereUniqueInput]
    connectOrCreate: [CoachConnectOrCreateInput]
    update: [CoachUpdateUniqueInput]
    upsert: [CoachUpsertUniqueInput]
    delete: [CoachDeleteUniqueInput]
    disconnect: [CoachWhereUniqueInput]
    set: [CoachWhereUniqueInput]
    updateMany: [CoachUpdateManyInput]
    deleteMany: [CoachDeleteManyInput]
}
input TeamColorSchemeCreateRelations {
    create: [ColorSchemeCreateInput]
    connect: [ColorSchemeWhereUniqueInput]
    connectOrCreate: [ColorSchemeConnectOrCreateInput]
}

input TeamColorSchemeUpdateRelations {
    create: [ColorSchemeCreateInput]
    connect: [ColorSchemeWhereUniqueInput]
    connectOrCreate: [ColorSchemeConnectOrCreateInput]
    update: [ColorSchemeUpdateUniqueInput]
    upsert: [ColorSchemeUpsertUniqueInput]
    delete: [ColorSchemeDeleteUniqueInput]
    disconnect: [ColorSchemeWhereUniqueInput]
    set: [ColorSchemeWhereUniqueInput]
    updateMany: [ColorSchemeUpdateManyInput]
    deleteMany: [ColorSchemeDeleteManyInput]
}
input TeamPlayersCreateRelations {
    create: [PlayerCreateInput]
    connect: [PlayerWhereUniqueInput]
    connectOrCreate: [PlayerConnectOrCreateInput]
}

input TeamPlayersUpdateRelations {
    create: [PlayerCreateInput]
    connect: [PlayerWhereUniqueInput]
    connectOrCreate: [PlayerConnectOrCreateInput]
    update: [PlayerUpdateUniqueInput]
    upsert: [PlayerUpsertUniqueInput]
    delete: [PlayerDeleteUniqueInput]
    disconnect: [PlayerWhereUniqueInput]
    set: [PlayerWhereUniqueInput]
    updateMany: [PlayerUpdateManyInput]
    deleteMany: [PlayerDeleteManyInput]
}

type Mutation {
    createCoach(data: CoachCreateInput!): Coach
    updateCoach(
        data: CoachUpdateInput!
        where: CoachWhereUniqueInput!
    ): Coach
    upsertCoach(
        data: CoachUpdateInput!
        where: CoachWhereUniqueInput!
    ): Coach
    deleteCoach(where: CoachWhereUniqueInput!): Coach
    deleteManyCoaches(where: CoachWhereInput!): BatchPayload

    createPlayer(data: PlayerCreateInput!): Player
    updatePlayer(
        data: PlayerUpdateInput!
        where: PlayerWhereUniqueInput!
    ): Player
    upsertPlayer(
        data: PlayerUpdateInput!
        where: PlayerWhereUniqueInput!
    ): Player
    deletePlayer(where: PlayerWhereUniqueInput!): Player
    deleteManyPlayers(
        where: PlayerWhereInput!
    ): BatchPayload

    createColorScheme(
        data: ColorSchemeCreateInput!
    ): ColorScheme
    updateColorScheme(
        data: ColorSchemeUpdateInput!
        where: ColorSchemeWhereUniqueInput!
    ): ColorScheme
    upsertColorScheme(
        data: ColorSchemeUpdateInput!
        where: ColorSchemeWhereUniqueInput!
    ): ColorScheme
    deleteColorScheme(
        where: ColorSchemeWhereUniqueInput!
    ): ColorScheme
    deleteManyColorSchemes(
        where: ColorSchemeWhereInput!
    ): BatchPayload

    createTeam(data: TeamCreateInput!): Team
    updateTeam(
        data: TeamUpdateInput!
        where: TeamWhereUniqueInput!
    ): Team
    upsertTeam(
        data: TeamUpdateInput!
        where: TeamWhereUniqueInput!
    ): Team
    deleteTeam(where: TeamWhereUniqueInput!): Team
    deleteManyTeams(where: TeamWhereInput!): BatchPayload
}

type Query {
    getCoach(where: CoachWhereUniqueInput!): Coach
    listCoaches(
        where: CoachWhereInput
        orderBy: CoachOrderByInput
    ): [Coach]

    getPlayer(where: PlayerWhereUniqueInput!): Player
    listPlayers(
        where: PlayerWhereInput
        orderBy: PlayerOrderByInput
    ): [Player]

    getColorScheme(
        where: ColorSchemeWhereUniqueInput!
    ): ColorScheme
    listColorSchemes(
        where: ColorSchemeWhereInput
        orderBy: ColorSchemeOrderByInput
    ): [ColorScheme]

    getTeam(where: TeamWhereUniqueInput!): Team
    listTeams(
        where: TeamWhereInput
        orderBy: TeamOrderByInput
    ): [Team]
}

type Subscription {
    onCreatedCoach(
        id: Int
        handle: String
        name: String
        teamId: Int
    ): Coach @aws_subscribe(mutations: ["createCoach"])
    onUpdatedCoach(
        id: Int
        handle: String
        name: String
        teamId: Int
    ): Coach @aws_subscribe(mutations: ["updateCoach"])
    onDeletedCoach(
        id: Int
        handle: String
        name: String
        teamId: Int
    ): Coach @aws_subscribe(mutations: ["deleteCoach"])

    onCreatedPlayer(
        id: Int
        handle: String
        name: String
        slug: String
        teamId: Int
    ): Player @aws_subscribe(mutations: ["createPlayer"])
    onUpdatedPlayer(
        id: Int
        handle: String
        name: String
        slug: String
        teamId: Int
    ): Player @aws_subscribe(mutations: ["updatePlayer"])
    onDeletedPlayer(
        id: Int
        handle: String
        name: String
        slug: String
        teamId: Int
    ): Player @aws_subscribe(mutations: ["deletePlayer"])

    onCreatedColorScheme(id: Int, teamId: Int): ColorScheme
        @aws_subscribe(mutations: ["createColorScheme"])
    onUpdatedColorScheme(id: Int, teamId: Int): ColorScheme
        @aws_subscribe(mutations: ["updateColorScheme"])
    onDeletedColorScheme(id: Int, teamId: Int): ColorScheme
        @aws_subscribe(mutations: ["deleteColorScheme"])

    onCreatedTeam(
        id: Int
        handle: String
        name: String
        slug: String
        abbreviation: String
    ): Team @aws_subscribe(mutations: ["createTeam"])
    onUpdatedTeam(
        id: Int
        handle: String
        name: String
        slug: String
        abbreviation: String
    ): Team @aws_subscribe(mutations: ["updateTeam"])
    onDeletedTeam(
        id: Int
        handle: String
        name: String
        slug: String
        abbreviation: String
    ): Team @aws_subscribe(mutations: ["deleteTeam"])
}
